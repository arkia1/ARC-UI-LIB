#!/usr/bin/env node
import fs from "fs-extra";
import path from "path";
import axios from "axios";
import prompts from "prompts";
import chalk from "chalk";

// Define component file structure
interface ComponentFile {
  filename: string;
  url: string;
  content?: string; // For local development
}

// Define available components with their files
const components: Record<string, ComponentFile[]> = {
  button: [
    {
      filename: "Button.tsx",
      url: "https://raw.githubusercontent.com/your-repo/components/button/Button.tsx",
    },
    {
      filename: "button-animations.css",
      url: "https://raw.githubusercontent.com/your-repo/components/button/button-animations.css",
    },
  ],
  // Add more components as needed
};

// For local development, use existing files instead of remote URLs
const useLocalFiles = true; // Set to false when deploying

// Fetch and save component files
async function fetchComponent(componentName: string) {
  if (!components[componentName]) {
    console.log(chalk.red(`Component "${componentName}" not found.`));
    return;
  }

  // Create component directory in user's project
  const componentDir = path.join(process.cwd(), "components", componentName);
  await fs.ensureDir(componentDir);

  console.log(chalk.blue(`Installing ${componentName} component...`));

  // Process each file in the component
  for (const file of components[componentName]) {
    const destPath = path.join(componentDir, file.filename);

    try {
      if (useLocalFiles) {
        // Copy from local project during development
        const sourcePath = path.join(
          process.cwd(),
          "..",
          "components",
          componentName,
          file.filename
        );
        await fs.copy(sourcePath, destPath);
      } else {
        // Fetch from remote URL in production
        const response = await axios.get(file.url);
        await fs.writeFile(destPath, response.data);
      }

      console.log(chalk.green(`  ✓ Added ${file.filename}`));
    } catch (error) {
      console.log(
        chalk.red(
          `  ✗ Failed to add ${file.filename}: ${(error as Error).message}`
        )
      );
    }
  }

  // Create index.ts file for easier imports
  const componentClassName =
    componentName.charAt(0).toUpperCase() + componentName.slice(1);
  const indexContent = `// Generated by ARC-UI CLI
export { default } from './${componentClassName}';
export * from './${componentClassName}';
`;

  await fs.writeFile(path.join(componentDir, "index.ts"), indexContent);
  console.log(chalk.green(`  ✓ Added index.ts for easier imports`));

  console.log(
    chalk.green(
      `\n✅ ${componentName} component has been installed successfully!`
    )
  );
  console.log(chalk.blue(`Import it using:`));
  console.log(
    chalk.yellow(
      `  import { ${componentClassName} } from './components/${componentName}'`
    )
  );

  // Check if this is a CSS component and add extra instructions
  if (
    components[componentName].some((file) => file.filename.endsWith(".css"))
  ) {
    console.log(
      chalk.blue(`\nThis component includes CSS that needs to be imported:`)
    );
    console.log(
      chalk.yellow(`  // In your main component or CSS entry point:`)
    );
    console.log(
      chalk.yellow(
        `  import './components/${componentName}/${
          components[componentName].find((f) => f.filename.endsWith(".css"))
            ?.filename
        }'`
      )
    );

    console.log(chalk.blue(`\nImport notes by framework:`));
    console.log(
      chalk.yellow(
        `  • React/Vite: Import the CSS directly in your component or main.tsx/jsx`
      )
    );
    console.log(
      chalk.yellow(
        `  • Next.js: Import in _app.js/tsx or use CSS Modules approach`
      )
    );
  }
}

// CLI prompt
(async () => {
  const response = await prompts({
    type: "select",
    name: "component",
    message: "Which component do you want to add?",
    choices: Object.keys(components).map((comp) => ({
      title: comp,
      value: comp,
    })),
  });

  if (response.component) {
    await fetchComponent(response.component);
  }
})();
